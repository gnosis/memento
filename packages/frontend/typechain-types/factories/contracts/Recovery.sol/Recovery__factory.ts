/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Recovery,
  RecoveryInterface,
} from "../../../contracts/Recovery.sol/Recovery";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "avatar",
        type: "address",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_recoverers",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_quorum",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recoverer",
        type: "address",
      },
      {
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "AlreadyProposed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guard_",
        type: "address",
      },
    ],
    name: "NotIERC165Compliant",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recoverer",
        type: "address",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousAvatar",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newAvatar",
        type: "address",
      },
    ],
    name: "AvatarSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "guard",
        type: "address",
      },
    ],
    name: "ChangedGuard",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "Replace",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousTarget",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newTarget",
        type: "address",
      },
    ],
    name: "TargetSet",
    type: "event",
  },
  {
    inputs: [],
    name: "avatar",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getGuard",
    outputs: [
      {
        internalType: "address",
        name: "_guard",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "guard",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "progress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "quorum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "oldOwner",
            type: "address",
          },
          {
            internalType: "address",
            name: "newOwner",
            type: "address",
          },
        ],
        internalType: "struct Recovery.Replacement[]",
        name: "replacements",
        type: "tuple[]",
      },
    ],
    name: "recover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_avatar",
        type: "address",
      },
    ],
    name: "setAvatar",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_guard",
        type: "address",
      },
    ],
    name: "setGuard",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
    ],
    name: "setTarget",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "initializeParams",
        type: "bytes",
      },
    ],
    name: "setUp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "target",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405260006068553480156200001657600080fd5b50604051620021b4380380620021b483398101604081905262000039916200061f565b60008484848460405160200162000054949392919062000692565b60408051601f19818403018152919052905062000071816200007c565b505050505062000740565b600054610100900460ff16158080156200009d5750600054600160ff909116105b80620000cd5750620000ba306200027160201b620009e91760201c565b158015620000cd575060005460ff166001145b620001365760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156200015a576000805461ff0019166101001790555b6200016462000280565b600080600080858060200190518101906200018091906200061f565b93509350935093506200019984620002e860201b60201c565b620001a48362000344565b620001af84620003a0565b606981905560005b825181101562000221576001606a6000858481518110620001dc57620001dc62000700565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055620002198162000716565b9050620001b7565b505050505080156200026d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001600160a01b03163b151590565b600054610100900460ff16620002dc5760405162461bcd60e51b815260206004820152602b60248201526000805160206200219483398151915260448201526a6e697469616c697a696e6760a81b60648201526084016200012d565b620002e66200041f565b565b620002f262000486565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f52ae88b092de36f87fb43fe794eb1381023b9c1bce563a871154022c63dce34290600090a35050565b6200034e62000486565b606780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f90cc2f570a6eb594b1580ea3e41247d2d73a55281889e86bd4ec2fc29c7e62d690600090a35050565b620003aa62000486565b6001600160a01b038116620004115760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200012d565b6200041c81620004e2565b50565b600054610100900460ff166200047b5760405162461bcd60e51b815260206004820152602b60248201526000805160206200219483398151915260448201526a6e697469616c697a696e6760a81b60648201526084016200012d565b620002e633620004e2565b6033546001600160a01b03163314620002e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200012d565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811681146200041c57600080fd5b8051620005578162000534565b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200058457600080fd5b815160206001600160401b0380831115620005a357620005a36200055c565b8260051b604051601f19603f83011681018181108482111715620005cb57620005cb6200055c565b604052938452858101830193838101925087851115620005ea57600080fd5b83870191505b84821015620006145762000604826200054a565b83529183019190830190620005f0565b979650505050505050565b600080600080608085870312156200063657600080fd5b8451620006438162000534565b6020860151909450620006568162000534565b60408601519093506001600160401b038111156200067357600080fd5b620006818782880162000572565b606096909601519497939650505050565b60006080820160018060a01b0380881684526020818816818601526080604086015282875180855260a087019150828901945060005b81811015620006e8578551851683529483019491830191600101620006c8565b50508094505050505082606083015295945050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200073957634e487b7160e01b600052601160045260246000fd5b5060010190565b611a4480620007506000396000f3fe60806040526004361061010d5760003560e01c80638da5cb5b11610095578063b0d691fe11610064578063b0d691fe146102e1578063c910638914610308578063d4b8399214610326578063e19a9dd914610346578063f2fde38b1461036657600080fd5b80638da5cb5b1461026e57806393234e801461028c578063a4f9edbf146102ac578063affed0e0146102cc57600080fd5b80635aef7de6116100dc5780635aef7de6146101b4578063715018a6146101ec578063776d1a01146102015780637aebd2a8146102215780637ceab3b11461024e57600080fd5b8063086cfca8146101195780631626ba7e1461013b5780631703a018146101705780633a871cdd1461019457600080fd5b3661011457005b600080fd5b34801561012557600080fd5b5061013961013436600461138e565b610386565b005b34801561014757600080fd5b5061015b610156366004611462565b6103e0565b60405190151581526020015b60405180910390f35b34801561017c57600080fd5b5061018660695481565b604051908152602001610167565b3480156101a057600080fd5b506101866101af3660046114a9565b61041a565b3480156101c057600080fd5b506066546101d4906001600160a01b031681565b6040516001600160a01b039091168152602001610167565b3480156101f857600080fd5b5061013961045e565b34801561020d57600080fd5b5061013961021c36600461138e565b610472565b34801561022d57600080fd5b5061018661023c3660046114fd565b606c6020526000908152604090205481565b34801561025a57600080fd5b506065546101d4906001600160a01b031681565b34801561027a57600080fd5b506033546001600160a01b03166101d4565b34801561029857600080fd5b506101396102a7366004611516565b6104cc565b3480156102b857600080fd5b506101396102c73660046115db565b6106af565b3480156102d857600080fd5b50606854610186565b3480156102ed57600080fd5b50735ff137d4b0fdcd49dca30c7cf57e578a026d27896101d4565b34801561031457600080fd5b506065546001600160a01b03166101d4565b34801561033257600080fd5b506067546101d4906001600160a01b031681565b34801561035257600080fd5b5061013961036136600461138e565b61086e565b34801561037257600080fd5b5061013961038136600461138e565b610970565b61038e6109f8565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f52ae88b092de36f87fb43fe794eb1381023b9c1bce563a871154022c63dce34290600090a35050565b6000606a60006103f08585610a52565b6001600160a01b0316815260208101919091526040016000205460ff161515600114905092915050565b6000610424610a76565b61042e8484610ad9565b905061043d6040850185611618565b1515905061044e5761044e84610b4c565b61045782610ba2565b9392505050565b6104666109f8565b6104706000610bfb565b565b61047a6109f8565b606780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f90cc2f570a6eb594b1580ea3e41247d2d73a55281889e86bd4ec2fc29c7e62d690600090a35050565b60006104da85858585610c4d565b905060005b828110156106a75760008484838181106104fb576104fb61165f565b610511926020604090920201908101915061138e565b905060008585848181106105275761052761165f565b905060400201602001602081019061053f919061138e565b90506000828260405160200161056b9291906001600160a01b0392831681529116602082015260400190565b60408051601f1981840301815291815281516020928301206001600160a01b0388166000908152606b845282812082825290935291205490915060ff16156105e6576040516392652d6360e01b81526001600160a01b0380871660048301528085166024830152831660448201526064015b60405180910390fd5b6001600160a01b0385166000908152606b602090815260408083208484528252808320805460ff19166001908117909155606c9092528220546106289161168b565b90506069548114156106825761063e8484610d16565b604080516001600160a01b038087168252851660208201527ff9b9728992035fb206d0eaedc55220cb1bdb49372cd3311f2b44399a2d246c43910160405180910390a15b6000918252606c6020526040909120555081905061069f816116a3565b9150506104df565b505050505050565b600054610100900460ff16158080156106cf5750600054600160ff909116105b806106e95750303b1580156106e9575060005460ff166001145b61074c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105dd565b6000805460ff19166001179055801561076f576000805461ff0019166101001790555b610777610d8d565b600080600080858060200190518101906107919190611747565b93509350935093506107a284610386565b6107ab83610472565b6107b484610970565b606981905560005b825181101561081f576001606a60008584815181106107dd576107dd61165f565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055610818816116a3565b90506107bc565b5050505050801561086a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6108766109f8565b6001600160a01b0381161561091c576040516301ffc9a760e01b815263736bd41d60e11b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa1580156108d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f491906117b3565b61091c576040516358b7533f60e11b81526001600160a01b03821660048201526024016105dd565b606580546001600160a01b0319166001600160a01b0383169081179091556040519081527f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa29060200160405180910390a150565b6109786109f8565b6001600160a01b0381166109dd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105dd565b6109e681610bfb565b50565b6001600160a01b03163b151590565b6033546001600160a01b031633146104705760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105dd565b6000806000610a618585610dbc565b91509150610a6e81610e02565b509392505050565b33735ff137d4b0fdcd49dca30c7cf57e578a026d2789146104705760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016105dd565b600080610ae583610f50565b9050610b3381610af9610140870187611618565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103e092505050565b610b3e576001610b41565b60005b60ff16949350505050565b606880546020830135916000610b61836116a3565b91905055146109e65760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b60448201526064016105dd565b80156109e657604051600090339060001990849084818181858888f193505050503d8060008114610bef576040519150601f19603f3d011682016040523d82523d6000602084013e610bf4565b606091505b5050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080610c818484604051602001610c669291906117d5565b60405160208183030381529060405280519060200120610f50565b90506000610cc58288888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a5292505050565b6001600160a01b0381166000908152606a602052604090205490915060ff16610d0c5760405163472511eb60e11b81526001600160a01b03821660048201526024016105dd565b9695505050505050565b606654610d88906001600160a01b03166000610d3185610fa3565b6040516001600160a01b0391821660248201528187166044820152908516606482015260840160408051601f198184030181529190526020810180516001600160e01b031663e318b52b60e01b179052600061107f565b505050565b600054610100900460ff16610db45760405162461bcd60e51b81526004016105dd9061183b565b610470611285565b600080825160411415610df35760208301516040840151606085015160001a610de7878285856112b5565b94509450505050610dfb565b506000905060025b9250929050565b6000816004811115610e1657610e16611886565b1415610e1f5750565b6001816004811115610e3357610e33611886565b1415610e815760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105dd565b6002816004811115610e9557610e95611886565b1415610ee35760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105dd565b6003816004811115610ef757610ef7611886565b14156109e65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105dd565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6066546040805163a0e67e2b60e01b815290516001926000926001600160a01b039091169163a0e67e2b9160048082019286929091908290030181865afa158015610ff2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261101a919081019061189c565b905060005b815181101561107857600082828151811061103c5761103c61165f565b60200260200101519050846001600160a01b0316816001600160a01b031614156110665750611078565b9250611071816116a3565b905061101f565b5050919050565b6065546000906001600160a01b03168015611203576040805180820182526002815261060f60f31b60208201529051633af85da960e11b81526001600160a01b038316916375f0bb52916110ea918a918a918a918a9160009182918291829182913390600401611940565b600060405180830381600087803b15801561110457600080fd5b505af1158015611118573d6000803e3d6000fd5b505060675460405163468721a760e01b81526001600160a01b03909116925063468721a791506111529089908990899089906004016119cf565b6020604051808303816000875af1158015611171573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119591906117b3565b604051631264e26d60e31b815261060f60f31b600482015281151560248201529092506001600160a01b03821690639327136890604401600060405180830381600087803b1580156111e657600080fd5b505af11580156111fa573d6000803e3d6000fd5b5050505061127c565b60675460405163468721a760e01b81526001600160a01b039091169063468721a7906112399089908990899089906004016119cf565b6020604051808303816000875af1158015611258573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c91906117b3565b50949350505050565b600054610100900460ff166112ac5760405162461bcd60e51b81526004016105dd9061183b565b61047033610bfb565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156112ec5750600090506003611370565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611340573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661136957600060019250925050611370565b9150600090505b94509492505050565b6001600160a01b03811681146109e657600080fd5b6000602082840312156113a057600080fd5b813561045781611379565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156113ea576113ea6113ab565b604052919050565b600082601f83011261140357600080fd5b813567ffffffffffffffff81111561141d5761141d6113ab565b611430601f8201601f19166020016113c1565b81815284602083860101111561144557600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561147557600080fd5b82359150602083013567ffffffffffffffff81111561149357600080fd5b61149f858286016113f2565b9150509250929050565b6000806000606084860312156114be57600080fd5b833567ffffffffffffffff8111156114d557600080fd5b840161016081870312156114e857600080fd5b95602085013595506040909401359392505050565b60006020828403121561150f57600080fd5b5035919050565b6000806000806040858703121561152c57600080fd5b843567ffffffffffffffff8082111561154457600080fd5b818701915087601f83011261155857600080fd5b81358181111561156757600080fd5b88602082850101111561157957600080fd5b60209283019650945090860135908082111561159457600080fd5b818701915087601f8301126115a857600080fd5b8135818111156115b757600080fd5b8860208260061b85010111156115cc57600080fd5b95989497505060200194505050565b6000602082840312156115ed57600080fd5b813567ffffffffffffffff81111561160457600080fd5b611610848285016113f2565b949350505050565b6000808335601e1984360301811261162f57600080fd5b83018035915067ffffffffffffffff82111561164a57600080fd5b602001915036819003821315610dfb57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561169e5761169e611675565b500190565b60006000198214156116b7576116b7611675565b5060010190565b600082601f8301126116cf57600080fd5b8151602067ffffffffffffffff8211156116eb576116eb6113ab565b8160051b6116fa8282016113c1565b928352848101820192828101908785111561171457600080fd5b83870192505b8483101561173c57825161172d81611379565b8252918301919083019061171a565b979650505050505050565b6000806000806080858703121561175d57600080fd5b845161176881611379565b602086015190945061177981611379565b604086015190935067ffffffffffffffff81111561179657600080fd5b6117a2878288016116be565b606096909601519497939650505050565b6000602082840312156117c557600080fd5b8151801515811461045757600080fd5b6020808252818101839052600090604080840186845b8781101561182e5781356117fe81611379565b6001600160a01b039081168452828601359061181982611379565b168386015291830191908301906001016117eb565b5090979650505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156118ae57600080fd5b815167ffffffffffffffff8111156118c557600080fd5b611610848285016116be565b6000815180845260005b818110156118f7576020818501810151868301820152016118db565b81811115611909576000602083870101525b50601f01601f19169290920160200192915050565b6002811061193c57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038c81168252602082018c90526101606040830181905260009161196d8483018e6118d1565b915061197c606085018d61191e565b8a60808501528960a08501528860c085015280881660e08501528087166101008501528382036101208501526119b282876118d1565b925080851661014085015250509c9b505050505050505050505050565b60018060a01b03851681528360208201526080604082015260006119f660808301856118d1565b9050611a05606083018461191e565b9594505050505056fea26469706673582212203e69c7cc4368308f65a0f0d4a55675cd2fadc2941cc784bc64a15a4f15eac50864736f6c634300080c0033496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069";

type RecoveryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RecoveryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Recovery__factory extends ContractFactory {
  constructor(...args: RecoveryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    avatar: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    _recoverers: PromiseOrValue<string>[],
    _quorum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Recovery> {
    return super.deploy(
      avatar,
      target,
      _recoverers,
      _quorum,
      overrides || {}
    ) as Promise<Recovery>;
  }
  override getDeployTransaction(
    avatar: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    _recoverers: PromiseOrValue<string>[],
    _quorum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      avatar,
      target,
      _recoverers,
      _quorum,
      overrides || {}
    );
  }
  override attach(address: string): Recovery {
    return super.attach(address) as Recovery;
  }
  override connect(signer: Signer): Recovery__factory {
    return super.connect(signer) as Recovery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RecoveryInterface {
    return new utils.Interface(_abi) as RecoveryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Recovery {
    return new Contract(address, _abi, signerOrProvider) as Recovery;
  }
}
