// Generated by @wagmi/cli@0.1.15 on 4/15/2023 at 10:54:14 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Recovery
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const recoveryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'avatar', internalType: 'address', type: 'address' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: '_recoverers', internalType: 'address[]', type: 'address[]' },
      { name: '_quorum', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'recoverer', internalType: 'address', type: 'address' },
      { name: 'oldOwner', internalType: 'address', type: 'address' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'AlreadyProposed',
  },
  {
    type: 'error',
    inputs: [{ name: 'guard_', internalType: 'address', type: 'address' }],
    name: 'NotIERC165Compliant',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAvatar',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newAvatar',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AvatarSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'guard',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ChangedGuard',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Replace',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousTarget',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newTarget',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'TargetSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'avatar',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGuard',
    outputs: [{ name: '_guard', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'guard',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'progress',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recoverer', internalType: 'address', type: 'address' },
      {
        name: 'replacements',
        internalType: 'struct Recovery.Replacement[]',
        type: 'tuple[]',
        components: [
          { name: 'oldOwner', internalType: 'address', type: 'address' },
          { name: 'newOwner', internalType: 'address', type: 'address' },
        ],
      },
    ],
    name: 'recover',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_avatar', internalType: 'address', type: 'address' }],
    name: 'setAvatar',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setCounter',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setCounter2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_guard', internalType: 'address', type: 'address' }],
    name: 'setGuard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_target', internalType: 'address', type: 'address' }],
    name: 'setTarget',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'initializeParams', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setUp',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'target',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'testCounter',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'testCounter2',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateUserOp',
    outputs: [
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IEntryPoint
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iEntryPointABI = [
  {
    type: 'error',
    inputs: [
      { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
      { name: 'paid', internalType: 'uint256', type: 'uint256' },
      { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
      { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
      { name: 'targetSuccess', internalType: 'bool', type: 'bool' },
      { name: 'targetResult', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'ExecutionResult',
  },
  {
    type: 'error',
    inputs: [
      { name: 'opIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'FailedOp',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'SenderAddressResult',
  },
  {
    type: 'error',
    inputs: [{ name: 'aggregator', internalType: 'address', type: 'address' }],
    name: 'SignatureValidationFailed',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'returnInfo',
        internalType: 'struct IEntryPoint.ReturnInfo',
        type: 'tuple',
        components: [
          { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
          { name: 'prefund', internalType: 'uint256', type: 'uint256' },
          { name: 'sigFailed', internalType: 'bool', type: 'bool' },
          { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
          { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
          { name: 'paymasterContext', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'senderInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'factoryInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'paymasterInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'ValidationResult',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'returnInfo',
        internalType: 'struct IEntryPoint.ReturnInfo',
        type: 'tuple',
        components: [
          { name: 'preOpGas', internalType: 'uint256', type: 'uint256' },
          { name: 'prefund', internalType: 'uint256', type: 'uint256' },
          { name: 'sigFailed', internalType: 'bool', type: 'bool' },
          { name: 'validAfter', internalType: 'uint48', type: 'uint48' },
          { name: 'validUntil', internalType: 'uint48', type: 'uint48' },
          { name: 'paymasterContext', internalType: 'bytes', type: 'bytes' },
        ],
      },
      {
        name: 'senderInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'factoryInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'paymasterInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelaySec', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'aggregatorInfo',
        internalType: 'struct IEntryPoint.AggregatorStakeInfo',
        type: 'tuple',
        components: [
          { name: 'aggregator', internalType: 'address', type: 'address' },
          {
            name: 'stakeInfo',
            internalType: 'struct IStakeManager.StakeInfo',
            type: 'tuple',
            components: [
              { name: 'stake', internalType: 'uint256', type: 'uint256' },
              {
                name: 'unstakeDelaySec',
                internalType: 'uint256',
                type: 'uint256',
              },
            ],
          },
        ],
      },
    ],
    name: 'ValidationResultWithAggregation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userOpHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'factory',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'paymaster',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AccountDeployed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalDeposit',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'aggregator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SignatureAggregatorChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'totalStaked',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unstakeDelaySec',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeLocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeUnlocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userOpHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'paymaster',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'success', internalType: 'bool', type: 'bool', indexed: false },
      {
        name: 'actualGasCost',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'actualGasUsed',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UserOperationEvent',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userOpHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nonce',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'revertReason',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'UserOperationRevertReason',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'addStake',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'depositTo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getDepositInfo',
    outputs: [
      {
        name: 'info',
        internalType: 'struct IStakeManager.DepositInfo',
        type: 'tuple',
        components: [
          { name: 'deposit', internalType: 'uint112', type: 'uint112' },
          { name: 'staked', internalType: 'bool', type: 'bool' },
          { name: 'stake', internalType: 'uint112', type: 'uint112' },
          { name: 'unstakeDelaySec', internalType: 'uint32', type: 'uint32' },
          { name: 'withdrawTime', internalType: 'uint48', type: 'uint48' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'initCode', internalType: 'bytes', type: 'bytes' }],
    name: 'getSenderAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'getUserOpHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'opsPerAggregator',
        internalType: 'struct IEntryPoint.UserOpsPerAggregator[]',
        type: 'tuple[]',
        components: [
          {
            name: 'userOps',
            internalType: 'struct UserOperation[]',
            type: 'tuple[]',
            components: [
              { name: 'sender', internalType: 'address', type: 'address' },
              { name: 'nonce', internalType: 'uint256', type: 'uint256' },
              { name: 'initCode', internalType: 'bytes', type: 'bytes' },
              { name: 'callData', internalType: 'bytes', type: 'bytes' },
              {
                name: 'callGasLimit',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'verificationGasLimit',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'preVerificationGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'maxFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'maxPriorityFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'paymasterAndData',
                internalType: 'bytes',
                type: 'bytes',
              },
              { name: 'signature', internalType: 'bytes', type: 'bytes' },
            ],
          },
          {
            name: 'aggregator',
            internalType: 'contract IAggregator',
            type: 'address',
          },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'beneficiary', internalType: 'address payable', type: 'address' },
    ],
    name: 'handleAggregatedOps',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'ops',
        internalType: 'struct UserOperation[]',
        type: 'tuple[]',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'beneficiary', internalType: 'address payable', type: 'address' },
    ],
    name: 'handleOps',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'op',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'targetCallData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'simulateHandleOp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'simulateValidation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unlockStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'withdrawStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'withdrawAddress',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'withdrawAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BaseAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const baseAccountABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateUserOp',
    outputs: [
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link recoveryABI}__.
 */
export function useRecovery(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: recoveryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__.
 */
export function useRecoveryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof recoveryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryABI,
    ...config,
  } as UseContractReadConfig<typeof recoveryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"avatar"`.
 */
export function useRecoveryAvatar<
  TSelectData = ReadContractResult<typeof recoveryABI, 'avatar'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryABI, 'avatar', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryABI,
    functionName: 'avatar',
    ...config,
  } as UseContractReadConfig<typeof recoveryABI, 'avatar', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"entryPoint"`.
 */
export function useRecoveryEntryPoint<
  TSelectData = ReadContractResult<typeof recoveryABI, 'entryPoint'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryABI, 'entryPoint', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryABI,
    functionName: 'entryPoint',
    ...config,
  } as UseContractReadConfig<typeof recoveryABI, 'entryPoint', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"getGuard"`.
 */
export function useRecoveryGetGuard<
  TSelectData = ReadContractResult<typeof recoveryABI, 'getGuard'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryABI, 'getGuard', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryABI,
    functionName: 'getGuard',
    ...config,
  } as UseContractReadConfig<typeof recoveryABI, 'getGuard', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"guard"`.
 */
export function useRecoveryGuard<
  TSelectData = ReadContractResult<typeof recoveryABI, 'guard'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryABI, 'guard', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryABI,
    functionName: 'guard',
    ...config,
  } as UseContractReadConfig<typeof recoveryABI, 'guard', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useRecoveryIsValidSignature<
  TSelectData = ReadContractResult<typeof recoveryABI, 'isValidSignature'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryABI, 'isValidSignature', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryABI,
    functionName: 'isValidSignature',
    ...config,
  } as UseContractReadConfig<
    typeof recoveryABI,
    'isValidSignature',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"nonce"`.
 */
export function useRecoveryNonce<
  TSelectData = ReadContractResult<typeof recoveryABI, 'nonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryABI, 'nonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryABI,
    functionName: 'nonce',
    ...config,
  } as UseContractReadConfig<typeof recoveryABI, 'nonce', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"owner"`.
 */
export function useRecoveryOwner<
  TSelectData = ReadContractResult<typeof recoveryABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof recoveryABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"progress"`.
 */
export function useRecoveryProgress<
  TSelectData = ReadContractResult<typeof recoveryABI, 'progress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryABI, 'progress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryABI,
    functionName: 'progress',
    ...config,
  } as UseContractReadConfig<typeof recoveryABI, 'progress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"quorum"`.
 */
export function useRecoveryQuorum<
  TSelectData = ReadContractResult<typeof recoveryABI, 'quorum'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryABI, 'quorum', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof recoveryABI, 'quorum', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"target"`.
 */
export function useRecoveryTarget<
  TSelectData = ReadContractResult<typeof recoveryABI, 'target'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryABI, 'target', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryABI,
    functionName: 'target',
    ...config,
  } as UseContractReadConfig<typeof recoveryABI, 'target', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"testCounter"`.
 */
export function useRecoveryTestCounter<
  TSelectData = ReadContractResult<typeof recoveryABI, 'testCounter'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryABI, 'testCounter', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryABI,
    functionName: 'testCounter',
    ...config,
  } as UseContractReadConfig<typeof recoveryABI, 'testCounter', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"testCounter2"`.
 */
export function useRecoveryTestCounter2<
  TSelectData = ReadContractResult<typeof recoveryABI, 'testCounter2'>,
>(
  config: Omit<
    UseContractReadConfig<typeof recoveryABI, 'testCounter2', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: recoveryABI,
    functionName: 'testCounter2',
    ...config,
  } as UseContractReadConfig<typeof recoveryABI, 'testCounter2', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__.
 */
export function useRecoveryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof recoveryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof recoveryABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryABI, TFunctionName>({
    abi: recoveryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"recover"`.
 */
export function useRecoveryRecover<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof recoveryABI, 'recover'>['abi'],
        'recover'
      > & { functionName?: 'recover' }
    : UseContractWriteConfig<TMode, typeof recoveryABI, 'recover'> & {
        abi?: never
        functionName?: 'recover'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryABI, 'recover'>({
    abi: recoveryABI,
    functionName: 'recover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useRecoveryRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof recoveryABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof recoveryABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryABI, 'renounceOwnership'>({
    abi: recoveryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"setAvatar"`.
 */
export function useRecoverySetAvatar<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof recoveryABI, 'setAvatar'>['abi'],
        'setAvatar'
      > & { functionName?: 'setAvatar' }
    : UseContractWriteConfig<TMode, typeof recoveryABI, 'setAvatar'> & {
        abi?: never
        functionName?: 'setAvatar'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryABI, 'setAvatar'>({
    abi: recoveryABI,
    functionName: 'setAvatar',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"setCounter"`.
 */
export function useRecoverySetCounter<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof recoveryABI, 'setCounter'>['abi'],
        'setCounter'
      > & { functionName?: 'setCounter' }
    : UseContractWriteConfig<TMode, typeof recoveryABI, 'setCounter'> & {
        abi?: never
        functionName?: 'setCounter'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryABI, 'setCounter'>({
    abi: recoveryABI,
    functionName: 'setCounter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"setCounter2"`.
 */
export function useRecoverySetCounter2<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof recoveryABI, 'setCounter2'>['abi'],
        'setCounter2'
      > & { functionName?: 'setCounter2' }
    : UseContractWriteConfig<TMode, typeof recoveryABI, 'setCounter2'> & {
        abi?: never
        functionName?: 'setCounter2'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryABI, 'setCounter2'>({
    abi: recoveryABI,
    functionName: 'setCounter2',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"setGuard"`.
 */
export function useRecoverySetGuard<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof recoveryABI, 'setGuard'>['abi'],
        'setGuard'
      > & { functionName?: 'setGuard' }
    : UseContractWriteConfig<TMode, typeof recoveryABI, 'setGuard'> & {
        abi?: never
        functionName?: 'setGuard'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryABI, 'setGuard'>({
    abi: recoveryABI,
    functionName: 'setGuard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"setTarget"`.
 */
export function useRecoverySetTarget<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof recoveryABI, 'setTarget'>['abi'],
        'setTarget'
      > & { functionName?: 'setTarget' }
    : UseContractWriteConfig<TMode, typeof recoveryABI, 'setTarget'> & {
        abi?: never
        functionName?: 'setTarget'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryABI, 'setTarget'>({
    abi: recoveryABI,
    functionName: 'setTarget',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"setUp"`.
 */
export function useRecoverySetUp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof recoveryABI, 'setUp'>['abi'],
        'setUp'
      > & { functionName?: 'setUp' }
    : UseContractWriteConfig<TMode, typeof recoveryABI, 'setUp'> & {
        abi?: never
        functionName?: 'setUp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryABI, 'setUp'>({
    abi: recoveryABI,
    functionName: 'setUp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useRecoveryTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof recoveryABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof recoveryABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryABI, 'transferOwnership'>({
    abi: recoveryABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function useRecoveryValidateUserOp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof recoveryABI, 'validateUserOp'>['abi'],
        'validateUserOp'
      > & { functionName?: 'validateUserOp' }
    : UseContractWriteConfig<TMode, typeof recoveryABI, 'validateUserOp'> & {
        abi?: never
        functionName?: 'validateUserOp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof recoveryABI, 'validateUserOp'>({
    abi: recoveryABI,
    functionName: 'validateUserOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__.
 */
export function usePrepareRecoveryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof recoveryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"recover"`.
 */
export function usePrepareRecoveryRecover(
  config: Omit<
    UsePrepareContractWriteConfig<typeof recoveryABI, 'recover'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryABI,
    functionName: 'recover',
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryABI, 'recover'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareRecoveryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof recoveryABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"setAvatar"`.
 */
export function usePrepareRecoverySetAvatar(
  config: Omit<
    UsePrepareContractWriteConfig<typeof recoveryABI, 'setAvatar'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryABI,
    functionName: 'setAvatar',
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryABI, 'setAvatar'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"setCounter"`.
 */
export function usePrepareRecoverySetCounter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof recoveryABI, 'setCounter'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryABI,
    functionName: 'setCounter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryABI, 'setCounter'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"setCounter2"`.
 */
export function usePrepareRecoverySetCounter2(
  config: Omit<
    UsePrepareContractWriteConfig<typeof recoveryABI, 'setCounter2'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryABI,
    functionName: 'setCounter2',
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryABI, 'setCounter2'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"setGuard"`.
 */
export function usePrepareRecoverySetGuard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof recoveryABI, 'setGuard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryABI,
    functionName: 'setGuard',
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryABI, 'setGuard'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"setTarget"`.
 */
export function usePrepareRecoverySetTarget(
  config: Omit<
    UsePrepareContractWriteConfig<typeof recoveryABI, 'setTarget'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryABI,
    functionName: 'setTarget',
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryABI, 'setTarget'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"setUp"`.
 */
export function usePrepareRecoverySetUp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof recoveryABI, 'setUp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryABI,
    functionName: 'setUp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryABI, 'setUp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareRecoveryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof recoveryABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link recoveryABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function usePrepareRecoveryValidateUserOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof recoveryABI, 'validateUserOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: recoveryABI,
    functionName: 'validateUserOp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof recoveryABI, 'validateUserOp'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link recoveryABI}__.
 */
export function useRecoveryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof recoveryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: recoveryABI,
    ...config,
  } as UseContractEventConfig<typeof recoveryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link recoveryABI}__ and `eventName` set to `"AvatarSet"`.
 */
export function useRecoveryAvatarSetEvent(
  config: Omit<
    UseContractEventConfig<typeof recoveryABI, 'AvatarSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: recoveryABI,
    eventName: 'AvatarSet',
    ...config,
  } as UseContractEventConfig<typeof recoveryABI, 'AvatarSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link recoveryABI}__ and `eventName` set to `"ChangedGuard"`.
 */
export function useRecoveryChangedGuardEvent(
  config: Omit<
    UseContractEventConfig<typeof recoveryABI, 'ChangedGuard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: recoveryABI,
    eventName: 'ChangedGuard',
    ...config,
  } as UseContractEventConfig<typeof recoveryABI, 'ChangedGuard'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link recoveryABI}__ and `eventName` set to `"Initialized"`.
 */
export function useRecoveryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof recoveryABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: recoveryABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof recoveryABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link recoveryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useRecoveryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof recoveryABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: recoveryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof recoveryABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link recoveryABI}__ and `eventName` set to `"Replace"`.
 */
export function useRecoveryReplaceEvent(
  config: Omit<
    UseContractEventConfig<typeof recoveryABI, 'Replace'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: recoveryABI,
    eventName: 'Replace',
    ...config,
  } as UseContractEventConfig<typeof recoveryABI, 'Replace'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link recoveryABI}__ and `eventName` set to `"TargetSet"`.
 */
export function useRecoveryTargetSetEvent(
  config: Omit<
    UseContractEventConfig<typeof recoveryABI, 'TargetSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: recoveryABI,
    eventName: 'TargetSet',
    ...config,
  } as UseContractEventConfig<typeof recoveryABI, 'TargetSet'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iEntryPointABI}__.
 */
export function useIEntryPoint(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iEntryPointABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iEntryPointABI}__.
 */
export function useIEntryPointRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iEntryPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iEntryPointABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iEntryPointABI,
    ...config,
  } as UseContractReadConfig<typeof iEntryPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIEntryPointBalanceOf<
  TSelectData = ReadContractResult<typeof iEntryPointABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iEntryPointABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iEntryPointABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof iEntryPointABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"getDepositInfo"`.
 */
export function useIEntryPointGetDepositInfo<
  TSelectData = ReadContractResult<typeof iEntryPointABI, 'getDepositInfo'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iEntryPointABI, 'getDepositInfo', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iEntryPointABI,
    functionName: 'getDepositInfo',
    ...config,
  } as UseContractReadConfig<
    typeof iEntryPointABI,
    'getDepositInfo',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"getUserOpHash"`.
 */
export function useIEntryPointGetUserOpHash<
  TSelectData = ReadContractResult<typeof iEntryPointABI, 'getUserOpHash'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iEntryPointABI, 'getUserOpHash', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iEntryPointABI,
    functionName: 'getUserOpHash',
    ...config,
  } as UseContractReadConfig<
    typeof iEntryPointABI,
    'getUserOpHash',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__.
 */
export function useIEntryPointWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iEntryPointABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iEntryPointABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iEntryPointABI, TFunctionName>({
    abi: iEntryPointABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"addStake"`.
 */
export function useIEntryPointAddStake<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iEntryPointABI, 'addStake'>['abi'],
        'addStake'
      > & { functionName?: 'addStake' }
    : UseContractWriteConfig<TMode, typeof iEntryPointABI, 'addStake'> & {
        abi?: never
        functionName?: 'addStake'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iEntryPointABI, 'addStake'>({
    abi: iEntryPointABI,
    functionName: 'addStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"depositTo"`.
 */
export function useIEntryPointDepositTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iEntryPointABI, 'depositTo'>['abi'],
        'depositTo'
      > & { functionName?: 'depositTo' }
    : UseContractWriteConfig<TMode, typeof iEntryPointABI, 'depositTo'> & {
        abi?: never
        functionName?: 'depositTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iEntryPointABI, 'depositTo'>({
    abi: iEntryPointABI,
    functionName: 'depositTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"getSenderAddress"`.
 */
export function useIEntryPointGetSenderAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'getSenderAddress'
        >['abi'],
        'getSenderAddress'
      > & { functionName?: 'getSenderAddress' }
    : UseContractWriteConfig<
        TMode,
        typeof iEntryPointABI,
        'getSenderAddress'
      > & {
        abi?: never
        functionName?: 'getSenderAddress'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iEntryPointABI, 'getSenderAddress'>({
    abi: iEntryPointABI,
    functionName: 'getSenderAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"handleAggregatedOps"`.
 */
export function useIEntryPointHandleAggregatedOps<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'handleAggregatedOps'
        >['abi'],
        'handleAggregatedOps'
      > & { functionName?: 'handleAggregatedOps' }
    : UseContractWriteConfig<
        TMode,
        typeof iEntryPointABI,
        'handleAggregatedOps'
      > & {
        abi?: never
        functionName?: 'handleAggregatedOps'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iEntryPointABI, 'handleAggregatedOps'>({
    abi: iEntryPointABI,
    functionName: 'handleAggregatedOps',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"handleOps"`.
 */
export function useIEntryPointHandleOps<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iEntryPointABI, 'handleOps'>['abi'],
        'handleOps'
      > & { functionName?: 'handleOps' }
    : UseContractWriteConfig<TMode, typeof iEntryPointABI, 'handleOps'> & {
        abi?: never
        functionName?: 'handleOps'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iEntryPointABI, 'handleOps'>({
    abi: iEntryPointABI,
    functionName: 'handleOps',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"simulateHandleOp"`.
 */
export function useIEntryPointSimulateHandleOp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'simulateHandleOp'
        >['abi'],
        'simulateHandleOp'
      > & { functionName?: 'simulateHandleOp' }
    : UseContractWriteConfig<
        TMode,
        typeof iEntryPointABI,
        'simulateHandleOp'
      > & {
        abi?: never
        functionName?: 'simulateHandleOp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iEntryPointABI, 'simulateHandleOp'>({
    abi: iEntryPointABI,
    functionName: 'simulateHandleOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"simulateValidation"`.
 */
export function useIEntryPointSimulateValidation<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'simulateValidation'
        >['abi'],
        'simulateValidation'
      > & { functionName?: 'simulateValidation' }
    : UseContractWriteConfig<
        TMode,
        typeof iEntryPointABI,
        'simulateValidation'
      > & {
        abi?: never
        functionName?: 'simulateValidation'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iEntryPointABI, 'simulateValidation'>({
    abi: iEntryPointABI,
    functionName: 'simulateValidation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"unlockStake"`.
 */
export function useIEntryPointUnlockStake<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iEntryPointABI, 'unlockStake'>['abi'],
        'unlockStake'
      > & { functionName?: 'unlockStake' }
    : UseContractWriteConfig<TMode, typeof iEntryPointABI, 'unlockStake'> & {
        abi?: never
        functionName?: 'unlockStake'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iEntryPointABI, 'unlockStake'>({
    abi: iEntryPointABI,
    functionName: 'unlockStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function useIEntryPointWithdrawStake<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iEntryPointABI,
          'withdrawStake'
        >['abi'],
        'withdrawStake'
      > & { functionName?: 'withdrawStake' }
    : UseContractWriteConfig<TMode, typeof iEntryPointABI, 'withdrawStake'> & {
        abi?: never
        functionName?: 'withdrawStake'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iEntryPointABI, 'withdrawStake'>({
    abi: iEntryPointABI,
    functionName: 'withdrawStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function useIEntryPointWithdrawTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iEntryPointABI, 'withdrawTo'>['abi'],
        'withdrawTo'
      > & { functionName?: 'withdrawTo' }
    : UseContractWriteConfig<TMode, typeof iEntryPointABI, 'withdrawTo'> & {
        abi?: never
        functionName?: 'withdrawTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iEntryPointABI, 'withdrawTo'>({
    abi: iEntryPointABI,
    functionName: 'withdrawTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__.
 */
export function usePrepareIEntryPointWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"addStake"`.
 */
export function usePrepareIEntryPointAddStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'addStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'addStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'addStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"depositTo"`.
 */
export function usePrepareIEntryPointDepositTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'depositTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'depositTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'depositTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"getSenderAddress"`.
 */
export function usePrepareIEntryPointGetSenderAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'getSenderAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'getSenderAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'getSenderAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"handleAggregatedOps"`.
 */
export function usePrepareIEntryPointHandleAggregatedOps(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'handleAggregatedOps'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'handleAggregatedOps',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iEntryPointABI,
    'handleAggregatedOps'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"handleOps"`.
 */
export function usePrepareIEntryPointHandleOps(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'handleOps'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'handleOps',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'handleOps'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"simulateHandleOp"`.
 */
export function usePrepareIEntryPointSimulateHandleOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'simulateHandleOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'simulateHandleOp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'simulateHandleOp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"simulateValidation"`.
 */
export function usePrepareIEntryPointSimulateValidation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'simulateValidation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'simulateValidation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iEntryPointABI,
    'simulateValidation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"unlockStake"`.
 */
export function usePrepareIEntryPointUnlockStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'unlockStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'unlockStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'unlockStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function usePrepareIEntryPointWithdrawStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'withdrawStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'withdrawStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'withdrawStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iEntryPointABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function usePrepareIEntryPointWithdrawTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iEntryPointABI, 'withdrawTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iEntryPointABI,
    functionName: 'withdrawTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iEntryPointABI, 'withdrawTo'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__.
 */
export function useIEntryPointEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"AccountDeployed"`.
 */
export function useIEntryPointAccountDeployedEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'AccountDeployed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'AccountDeployed',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'AccountDeployed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"Deposited"`.
 */
export function useIEntryPointDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'Deposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'Deposited',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'Deposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"SignatureAggregatorChanged"`.
 */
export function useIEntryPointSignatureAggregatorChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'SignatureAggregatorChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'SignatureAggregatorChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iEntryPointABI,
    'SignatureAggregatorChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"StakeLocked"`.
 */
export function useIEntryPointStakeLockedEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'StakeLocked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'StakeLocked',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'StakeLocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"StakeUnlocked"`.
 */
export function useIEntryPointStakeUnlockedEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'StakeUnlocked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'StakeUnlocked',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'StakeUnlocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"StakeWithdrawn"`.
 */
export function useIEntryPointStakeWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'StakeWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'StakeWithdrawn',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'StakeWithdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"UserOperationEvent"`.
 */
export function useIEntryPointUserOperationEventEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'UserOperationEvent'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'UserOperationEvent',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'UserOperationEvent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"UserOperationRevertReason"`.
 */
export function useIEntryPointUserOperationRevertReasonEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'UserOperationRevertReason'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'UserOperationRevertReason',
    ...config,
  } as UseContractEventConfig<
    typeof iEntryPointABI,
    'UserOperationRevertReason'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iEntryPointABI}__ and `eventName` set to `"Withdrawn"`.
 */
export function useIEntryPointWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof iEntryPointABI, 'Withdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iEntryPointABI,
    eventName: 'Withdrawn',
    ...config,
  } as UseContractEventConfig<typeof iEntryPointABI, 'Withdrawn'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link baseAccountABI}__.
 */
export function useBaseAccount(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: baseAccountABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseAccountABI}__.
 */
export function useBaseAccountRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof baseAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseAccountABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: baseAccountABI,
    ...config,
  } as UseContractReadConfig<typeof baseAccountABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseAccountABI}__ and `functionName` set to `"entryPoint"`.
 */
export function useBaseAccountEntryPoint<
  TSelectData = ReadContractResult<typeof baseAccountABI, 'entryPoint'>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseAccountABI, 'entryPoint', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: baseAccountABI,
    functionName: 'entryPoint',
    ...config,
  } as UseContractReadConfig<typeof baseAccountABI, 'entryPoint', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseAccountABI}__ and `functionName` set to `"nonce"`.
 */
export function useBaseAccountNonce<
  TSelectData = ReadContractResult<typeof baseAccountABI, 'nonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseAccountABI, 'nonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: baseAccountABI,
    functionName: 'nonce',
    ...config,
  } as UseContractReadConfig<typeof baseAccountABI, 'nonce', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseAccountABI}__.
 */
export function useBaseAccountWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof baseAccountABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof baseAccountABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof baseAccountABI, TFunctionName>({
    abi: baseAccountABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function useBaseAccountValidateUserOp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseAccountABI,
          'validateUserOp'
        >['abi'],
        'validateUserOp'
      > & { functionName?: 'validateUserOp' }
    : UseContractWriteConfig<TMode, typeof baseAccountABI, 'validateUserOp'> & {
        abi?: never
        functionName?: 'validateUserOp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof baseAccountABI, 'validateUserOp'>({
    abi: baseAccountABI,
    functionName: 'validateUserOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseAccountABI}__.
 */
export function usePrepareBaseAccountWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseAccountABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseAccountABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseAccountABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseAccountABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function usePrepareBaseAccountValidateUserOp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseAccountABI, 'validateUserOp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseAccountABI,
    functionName: 'validateUserOp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseAccountABI, 'validateUserOp'>)
}
